<?php
/**
 * @file
 * Provides functionality for handling webform hook.
 */
use Drupal\webform\WebformSubmissionInterface;
use Drupal\Core\Form\FormStateInterface;


/**
 * Implements hook_form_alter().
 */
function ellison_webform_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (strpos($form_id, 'webform_submission_contact') !== FALSE ||
    strpos($form_id, 'webform_submission_service_and_maintenance') !== FALSE ||
    strpos($form_id, 'webform_submission_parts_and_accessories') !== FALSE ||
    strpos($form_id, 'webform_submission_training_request') !== FALSE ||
    strpos($form_id, 'webform_submission_registration_jotp') !== FALSE ||
    strpos($form_id, 'webform_submission_trade_in_form') !== FALSE ||
    strpos($form_id, 'webform_submission_request_service') !== FALSE
  ) {
    $session = \Drupal::request()->getSession();
    $ellison_region = $session->get('ellison_region');

    $region = [];
    if (!empty($_COOKIE['ellison_region']) ) {
      $region = json_decode($_COOKIE['ellison_region'], TRUE);
    }
    elseif (!empty($ellison_region)) {
      $region = json_decode($ellison_region, TRUE);
    }
    if (!empty($region)) {
              if (isset($form['elements']['location']) || isset($form['elements']['select_location']) || isset($form['elements']['location_dropdown'])) {
        if (!empty($region['region_id'])) {
          $parent_id = $region['region_id'];
          $child_terms = \Drupal::entityTypeManager()
            ->getStorage('taxonomy_term')
            ->loadTree('regions', $parent_id, NULL, FALSE);
          $child_region = [];
          foreach ($child_terms as $term) {
            $child_region[$term->name] = $term->name;
          }
          if (isset($form['elements']['location'])) {
            $form['elements']['location']['#options'] = $child_region;
            if (empty($child_region)) {
              $form['elements']['location']['#access'] = FALSE;
            }
          }
          elseif (isset($form['elements']['select_location']) && !empty($child_region)) {
            $form['elements']['select_location']['#options'] = $child_region;
          }
          elseif (isset($form['elements']['location_dropdown']) && !empty($child_region)) {
            $form['elements']['location_dropdown']['#options'] = $child_region;
          }
        }
      }
      if (isset($form['elements']['region__c'])) {
        // Set the form element 'region__c' to the value of $region.
        if(is_array($region) && isset($region['sf_region_id']) && !empty($region['sf_region_id'])){
            $form['elements']['region__c']['#default_value'] = $region['sf_region_id'];
        }else{
            // default is salesforce southern california region id
            $form['elements']['region__c']['#default_value'] = '218';
        }
      }
      if (isset($form['elements']['webform_region_c'])) {
        // Set the form element 'region__c' to the value of $region.
        if(is_array($region) && isset($region['sf_region_id']) && !empty($region['sf_region_id'])){
            $form['elements']['webform_region_c']['#default_value'] = $region['sf_region_id'];
        }else{
            // default is salesforce southern california region id
            $form['elements']['webform_region_c']['#default_value'] = '218';
        }
      }
      if (isset($form['elements']['source_page_url'])) {
        $request_stack = \Drupal::service('request_stack');
        $request = $request_stack->getCurrentRequest();
        if ($request && $request->query->has('source_url')) {
          $form['elements']['source_page_url']['#default_value'] = $request->query->get('source_url');
        } else {
          $form['elements']['source_page_url']['#default_value'] = $request->getUri();
        }

      }
    }
  }  

}




/**
 * Implements hook_webform_submission_insert().
 */
function ellison_webform_webform_submission_insert(WebformSubmissionInterface $submission) {
  // Target the "Contact Us" form, JOTP registration forms, and other forms with location dropdowns.
  $webform_id = $submission->getWebform()->id();
  if ($webform_id !== 'contact' && 
      strpos($webform_id, 'registration_jotp') === FALSE &&
      $webform_id !== 'service_and_maintenance' &&
      $webform_id !== 'parts_and_accessories' &&
      $webform_id !== 'trade_in_form' &&
      $webform_id !== 'training_request' &&
      $webform_id !== 'request_service') {
    return;
  }

  // Log start of CTM transmission.
  \Drupal::logger('ctm_integration')->info(
    'CTM Integration: starting transmission for submission @sid',
    ['@sid' => $submission->id()]
  );

  // Grab GCLID from the query string if present.
  $request = \Drupal::request();
  $gclid   = $request->query->get('gclid', '');

  // Build the payload.
  $payload = [
    'country_code' => '1',
    'phone_number'      =>  str_replace("+", "", $submission->getElementData('phone')),
    'paid_attribution'  => [
      'gclid'       => $gclid,
      'campaign_id' => '123123',
      'adgroup_id'  => '456456',
      'creative_id' => '787878',
      'form_id'     => '909090',
    ],
    'custom_fields'     => [
      'edit-submitted-company'            => $submission->getElementData('company'),
      'edit-submitted-firstname'          => $submission->getElementData('firstname'),
      'edit-submitted-lastname'           => $submission->getElementData('lastname'),
      'edit-submitted-title'              => $submission->getElementData('title'),
      'edit-submitted-email'              => $submission->getElementData('email'),
      'edit-submitted-street'             => $submission->getElementData('street'),
      'edit-submitted-city'               => $submission->getElementData('city'),
      'edit-submitted-state'              => $submission->getElementData('state'),
      'edit-submitted-postalcode'         => $submission->getElementData('postalcode'),
      'edit-submitted-leads-interest-c'   => $submission->getElementData('leads_interest__c'),
      'edit-submitted-how-did-you-hear-c' => $submission->getElementData('how_did_you_hear__c'),
      'edit-submitted-webform-best-time-c'=> $submission->getElementData('webform_best_time__c'),
      'edit-submitted-industry'           => $submission->getElementData('industry'),
      'select_location'                   => $submission->getElementData('location') ?: $submission->getElementData('location_dropdown') ?: $submission->getElementData('select_location'),
      'edit-submitted-description'        => $submission->getElementData('description'),
      'edit_submitted_leadsource'         => $submission->getElementData('leadsource'),
    ],
  ];

  // Log the payload for debugging.
  \Drupal::logger('ctm_integration')->debug(
    'CTM Integration payload for submission @sid: @payload',
    [
      '@sid' => $submission->id(),
      '@payload' => print_r($payload, TRUE),
    ]
  );

  // Prepare the HTTP client and endpoint.
  $client    = \Drupal::httpClient();
  $frt_token = 'FRT472ABB2C5B9B141ADAB06C7A709212DB922839F0589BD3C86E24F9356DEDDA29';
  $api_key   = '6y0SQYZx6CgmOi9WOvjFX8FkMd7GEF3bWOi79GgXz8WZU_Qg';
  $url       = "https://api.calltrackingmetrics.com/api/v1/formreactor/{$frt_token}?key={$api_key}";

  try {
    $response = $client->post($url, [
      'form_params'     => $payload,
      'timeout'         => 5,
      'connect_timeout' => 2,
    ]);

    $status = $response->getStatusCode();
    $body   = (string) $response->getBody();

    if ($status === 200) {
      \Drupal::logger('ctm_integration')->info(
        'CTM Integration: successfully sent submission @sid. Response: @body',
        [
          '@sid' => $submission->id(),
          '@body' => $body,
        ]
      );
    }
    else {
      \Drupal::logger('ctm_integration')->warning(
        'CTM Integration: HTTP @code for submission @sid. Response: @body',
        [
          '@code' => $status,
          '@sid'  => $submission->id(),
          '@body' => $body,
        ]
      );
    }
  }
  catch (\Exception $e) {
    \Drupal::logger('ctm_integration')->error(
      'CTM Integration exception for submission @sid: @message',
      [
        '@sid'     => $submission->id(),
        '@message' => $e->getMessage(),
      ]
    );
  }
}