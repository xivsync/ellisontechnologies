{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set attributes = create_attribute() %}

{%
  set classes = [
    paragraph.bundle|clean_class
  ]
%}

{% set uid = random() %}

{# @todo create dropdown component: field_value twig module is used to avoid field twig template #}
{% set specifications = content.field_specification | field_value %}

<div{{ attributes.addClass(classes) }}>

  <div
    id="dropdown-{{ uid }}"
    class="dropdown accordion-button-dropdown {{ specifications | length > 1 ? 'multiple-results' : 'single-result'}} state-is-collapsed"
    data-dropdown-type="accordion"
    data-dropdown-state="collapsed"
    data-dropdown-unique-id="{{ uid }}"
  >

    <button
      id="toggle-{{ uid }}"
      class="dropdown__toggle has-icon"
      aria-expanded="false"
      data-dropdown-unique-id="{{ uid }}"
    >
      {{ content.field_label }}
      <svg fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9"></path>
      </svg>
    </button>

    <div
      class="dropdown__menu"
      aria-controled-by="toggle-{{uid}}"
      data-dropdown-unique-id="{{ uid }}"
    >

      <ul
        class="dropdown__menu--list"
        aria-labelledby="toggle-{{ uid }}"
        data-dropdown-unique-id="{{ uid }}"
      >
        {% for specification in specifications %}
          <li class="dropdown__menu--item">
            {{ specification }}
          </li>
        {% endfor %}
      </ul>

    </div>

  </div>

</div>
