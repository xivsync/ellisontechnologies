{#
/**
 * @file
 * Theme override to display a page.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{#{ attach_library('ellison/model') }#}

{% set base_class = 'page' %}

{% set content__attributes = content_attributes|merge({
  'class': bem('content', ['model'], base_class, ''),
}) %}

{% set series_model_list_count = drupal_view_result('list_cards_of_models_for_a_series', 'block_1') | length %}

{% set specs_model_list_count = drupal_view_result('list_of_specs_for_model', 'block_1') | length %}

{% set has_buttons_content = drupal_entity('paragraph', 1047) | render ? true : false %}

{% set has_build_a_quote = content.field_enable_build_a_quote | render | striptags | trim == 'True' ? true : false %}

{% set has_components = content.field_components | render ? true : false %}

{% set has_parts_content = drupal_entity('paragraph', 415) | render ? true : false %}

{% set has_solution_content = drupal_entity('paragraph', 418)  | render ? true : false %}



{% set classes = [
    has_build_a_quote ? 'has-build-a-quote',
    has_carousel_content ? 'has-carousel-content',
  ]
%}

<article {{ bem(base_class,classes) }}>

  {{ title_prefix }}
  {% if not page %}
    {% include "@atoms/text/headings/_heading.twig" with {
      "headling__level": 2,
      "heading": 'Model: ' ~ label | render | striptags | trim,
      "heading_url": null,
      "heading_link_attributes": {
        'rel': 'bookmark'
      },
    } %}
  {% endif %}
  {{ title_suffix }}

  <div {{ add_attributes(content__attributes) }}>
    <div class="page__header">
      <div class="page__header--image">
        {{ content.field_media_image }}
      </div>
      <div class="page__header--content">
        <div class="components">
          
          <div class="component">
            {{ content.field_series }}
          </div>

          <div class="component">
            
            <div class="component__inner">

              {% include "@molecules/cta/cta.twig" with {
                classes: ['cta-button','text__align--right',],
                align_class: 'text__align--right',
                body: '',
                webform_url: '/form/contact',
                webform_text: 'Contact Us',
                cta_button: '',
              } %}

              {% if has_buttons_content %}
                {{ drupal_entity('paragraph', 1047) }}
              {% endif %}

            </div>

          </div>

          <div class="component">
            {{ drupal_view('series', 'block_1') }}
          </div>

          <div class="component">
            <div class="specs">
              {% if specs_model_list_count > 1 %}
                {{ drupal_view('list_of_specs_for_model', 'block_1') }}
              {% endif %}
            </div>
          </div>

        </div>
      </div>
    </div>

    {% if series_model_list_count > 2 %}
        <div class="components">
          {{ drupal_view('list_cards_of_models_for_a_series', 'block_1') }}
        </div>
    {% endif %}

    {# Show only Model Component Content #}
    {{ content | without(
      'field_media_image',
      'field_series',
      'field_view_node',
      'field_brand',
      'field_enable_build_a_quote',
      'field_carousel_content',
      'field_default_series_model',
      'field_product',
      'field_region',
      'field_series',
      'field_technologies'
    ) }}

    {% if (has_build_a_quote or has_parts_content or has_solution_content) and has_components == false %}
      <div class="components">

        {# Build a Quote Paragraph Library Entity = 618 #}
        {% if has_build_a_quote %}
          {{ drupal_entity('paragraph', 618) }}
        {% endif %}

        {# Accessory Paragraph Library Entity = 414 #}
        {% if has_parts_content and has_components == false %}
          <div class="component remove-mb">
            {{ drupal_entity('paragraph', 415) }}
          </div>
        {% endif %}

        {# Turnkey Paragraph Library Entity = 418 #}
        {% if has_solution_content and has_components == false %}
          <div class="component remove-mb">
            {{ drupal_entity('paragraph', 418) }}
          </div>
        {% endif %}

      </div>
    {% endif %}

  </div>

</article>