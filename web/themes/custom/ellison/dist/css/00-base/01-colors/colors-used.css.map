{"version":3,"file":"css/00-base/01-colors/colors-used.css","mappings":";;;AAqEA,MAGI,oTAIF,mCAPF,MASM,8UAOJ,2BAEI,oTAOJ,wBAEI,6U","sources":["webpack://emulsify-drupal/./components/00-base/01-colors/colors-used.scss"],"sourcesContent":["@use 'colors-vars';\n\n// Color Usage variables - use these (via the `clr` function below)\n// rather than color variables directly.\n$defaultColors: (\n  text: colors-vars.$gray,\n  text-inverse: colors-vars.$white,\n  background: colors-vars.$white,\n  background-section: colors-vars.$gray-lightest,\n  primary: colors-vars.$blue,\n  secondary: colors-vars.$purple,\n  accent: colors-vars.$gray-dark,\n  accent-high: colors-vars.$black,\n  highlight: colors-vars.$gray-lighter,\n  highlight-high: colors-vars.$gray-lightest,\n  muted: colors-vars.$near-white,\n  warning: colors-vars.$yellow-light,\n  error: colors-vars.$red-light,\n  message: colors-vars.$green-light,\n);\n\n$darkColors: (\n  text: colors-vars.$white,\n  text-inverse: colors-vars.$gray,\n  background: colors-vars.$gray,\n  background-inverse: colors-vars.$gray-light,\n  background-section: colors-vars.$gray-dark,\n  primary: colors-vars.$blue,\n  secondary: colors-vars.$purple,\n  accent: colors-vars.$gray-lightest,\n  accent-high: colors-vars.$white,\n  highlight: colors-vars.$gray-dark,\n  highlight-high: colors-vars.$gray-darker,\n  muted: colors-vars.$gray-darker,\n  warning: colors-vars.$yellow-light,\n  error: colors-vars.$red-light,\n  message: colors-vars.$green-light,\n);\n\n///////////\n// Usage //\n///////////\n// This color function makes it easy for you to call a color by it's functional\n// name anywhere you need.\n// E.g. to use the `text` color, you type: `color: clr(text);`\n//\n// How it works:\n// This function works in conjunction with the dynamic css custom properties\n// declarations below. The item called in the function is prefixed with\n// `var(--c-` to call the custom property for that color.\n// E.g. `color: clr(text);` will return `color: var(--c-text);`\n// Note: (The `--c-` is added via the `@each` loops below)\n@function clr($colorChoice) {\n  @return var(--c-#{$colorChoice});\n}\n\n// Create CSS custom properties\n// This is what powers the built-in OS light/dark mode switching.\n// For each color variable above (e.g. `text` and `background`) a css custom\n// property will be created. (e.g. `--c-text:` and `--c-background:`).\n//\n// The first `@each` below will create a custom property for each item in the\n// `$defaultColors` map. So put all of your default colors there.\n//\n// The `prefers-color-scheme: dark` media query below will then create custom\n// properties for each of the colors in the `$darkColors` map only if the\n// browser supports that feature. If there is an exact match (e.g. `text`) in\n// both maps, the one from `$darkColors` will be used on machines that have\n// opted to use the 'dark mode' on their OS.\n:root {\n  // Create custom properties for default colors\n  @each $name, $color in $defaultColors {\n    --c-#{$name}: #{$color};\n  }\n\n  // Create custom properties for dark colors, an duse them if the user's OS has dark mode enabled\n  @media (prefers-color-scheme: dark) {\n    @each $name, $color in $darkColors {\n      --c-#{$name}: #{$color};\n    }\n  }\n\n  // Use the default color scheme for the \"Default Theme\" section of the\n  // component library regardless of OS setting.\n  // This is required to show the correct colors in the component library at all times\n  [data-theme='default'] {\n    @each $name, $color in $defaultColors {\n      --c-#{$name}: #{$color};\n    }\n  }\n\n  // Use the dark color scheme for the \"Dark Theme\" section of the  component\n  // library regardless of OS setting.\n  // This is required to show the correct colors in the component library at all times\n  [data-theme='dark'] {\n    @each $name, $color in $darkColors {\n      --c-#{$name}: #{$color};\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}