{"version":3,"file":"js/02-molecules/dropdown/dropdown.js","mappings":";;;;;AAAAA,MAAM,CAACC,SAAS,CAACC,QAAQ,CAAG,CAC1BC,MAAM,CAAE,SAAAA,OAAUC,CAAO,CAAY,CAMnCC,IAAI,CAAC,gBAAgB,CAAE,WAAW,CAAED,CAAO,CAAC,CAACE,OAAO,CAElD,SAAUC,CAAO,CAAE,IAwBX,CAAAC,CAAI,CAAGD,CAAO,CAACE,OAAO,CAACC,gBAAgB,CACvCC,CAAc,CAAGC,QAAQ,CAACC,cAAc,WAAAC,MAAA,CAAWN,CAAI,EAAG,CAChEG,CAAc,CAACI,gBAAgB,CAAC,OAAO,CAxBvC,SAAwBC,CAAC,CAAE,IAEnB,CAAAL,CAAc,CAAGK,CAAC,CAACC,MAAM,CACzBT,CAAI,CAAGG,CAAc,CAACF,OAAO,CAACC,gBAAgB,CAE9CQ,CAAW,CAAGN,QAAQ,CAACC,cAAc,aAAAC,MAAA,CAAaN,CAAI,EAAG,CACzDW,CAAK,CAAGD,CAAW,CAACT,OAAO,CAACW,aAAa,CAE/CC,OAAO,CAACC,GAAG,CAAC,OAAO,CAACH,CAAK,CAAC,CAG1BR,CAAc,CAACY,YAAY,CAAC,eAAe,CAAU,UAAU,GAAlBJ,CAAkB,CAAgB,CAE/EE,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAACJ,CAAW,CAACT,OAAO,CAAC,CAErDS,CAAW,CAACT,OAAO,CAACW,aAAa,CAAY,UAAU,GAAlBD,CAAkB,CAAG,WAAW,CAAG,UAAW,CACnFE,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAACJ,CAAW,CAACT,OAAO,CAAC,CACpDS,CAAW,CAACM,SAAS,CAACC,MAAM,CAAS,UAAU,GAAlBN,CAAkB,CAAG,mBAAmB,CAAG,oBAAoB,CAAC,CAC7FD,CAAW,CAACM,SAAS,CAACE,GAAG,CAAS,UAAU,GAAlBP,CAAkB,CAAG,oBAAoB,CAAG,mBAAmB,CAE3F,CAAC,CAMH,CAAC,CAIL,CACF,CAAC,C","sources":["webpack://emulsify-drupal/./components/02-molecules/dropdown/dropdown.js"],"sourcesContent":["Drupal.behaviors.dropdown = {\n  attach: function (context, settings) {\n    // Use context to filter the DOM to only the elements of interest,\n    // and use once() to guarantee that our callback function processes\n    // any given element one time at most, regardless of how many times\n    // the behaviour itself is called (it is not sufficient in general\n    // to assume an element will only ever appear in a single context).\n    once('enableDropdown', '.dropdown', context).forEach(\n      \n      function (element) {\n\n        function toggleDropdown(e) {\n\n          const toggleButtonEl = e.target;\n          const uuid = toggleButtonEl.dataset.dropdownUniqueId;\n          \n          const componentEl = document.getElementById(`dropdown-${uuid}`);\n          const state = componentEl.dataset.dropdownState;\n\n          console.log('state',state);\n\n          // toggle based on state\n          toggleButtonEl.setAttribute('aria-expanded', state==='expanded' ? false : true);\n\n          console.log('componentEl:before',componentEl.dataset);\n\n          componentEl.dataset.dropdownState = (state==='expanded' ? 'collapsed' : 'expanded');\n          console.log('componentEl:after',componentEl.dataset);\n          componentEl.classList.remove(state==='expanded' ? 'state-is-expanded' : 'state-is-collapsed');\n          componentEl.classList.add(state==='expanded' ? 'state-is-collapsed' : 'state-is-expanded');\n          \n        }\n\n        const uuid = element.dataset.dropdownUniqueId;\n        const toggleButtonEl = document.getElementById(`toggle-${uuid}`);\n        toggleButtonEl.addEventListener('click', toggleDropdown);\n        \n      }\n      \n    );\n\n  }\n};\n"],"names":["Drupal","behaviors","dropdown","attach","context","once","forEach","element","uuid","dataset","dropdownUniqueId","toggleButtonEl","document","getElementById","concat","addEventListener","e","target","componentEl","state","dropdownState","console","log","setAttribute","classList","remove","add"],"sourceRoot":""}