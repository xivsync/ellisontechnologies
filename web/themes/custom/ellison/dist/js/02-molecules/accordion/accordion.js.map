{"version":3,"file":"js/02-molecules/accordion/accordion.js","mappings":";;;;;AAAAA,MAAM,CAACC,SAAS,CAACC,SAAS,CAAG,CAC3BC,MAAM,UAAAA,OAACC,CAAO,CAAE,IAER,CAAAC,CAAK,CAAGD,CAAO,CAACE,gBAAgB,CAAC,oBAAoB,CAAC,CACtDC,CAAQ,CAAGH,CAAO,CAACE,gBAAgB,CAAC,yBAAyB,CAAC,CAE9DE,CAAU,CAAG,4BAA4B,CACzCC,CAAS,CAAG,yBAAyB,CACrCC,CAAW,CAAG,eAAe,CAG7BC,CAAM,CAAG,QAAAA,CAACC,CAAI,CAAEC,CAAM,CAAK,CAC/BD,CAAI,CAACE,YAAY,CAACL,CAAS,CAAE,MAAM,CAAC,CACpCI,CAAM,CAACC,YAAY,CAACJ,CAAW,CAAE,MAAM,CACzC,CAAC,CAGKK,CAAQ,CAAG,QAAAA,CAACH,CAAI,CAAEC,CAAM,CAAK,CACjCD,CAAI,CAACE,YAAY,CAACL,CAAS,CAAE,OAAO,CAAC,CACrCI,CAAM,CAACC,YAAY,CAACJ,CAAW,CAAE,OAAO,CAC1C,CAAC,CAGDL,CAAK,CAACW,OAAO,CAAC,SAACJ,CAAI,CAAK,CACtB,GAAM,CAAAC,CAAM,CAAGD,CAAI,CAACK,aAAa,CAACT,CAAU,CAAC,CAG7CO,CAAQ,CAACH,CAAI,CAAEC,CAAM,CAAC,CAEtBA,CAAM,CAACK,gBAAgB,CAAC,OAAO,CAAE,UAAM,CAErC,MAA4C,MAAM,GAA3CL,CAAM,CAACM,YAAY,CAACT,CAAW,CAAY,CAC9CK,CAAQ,CAACH,CAAI,CAAEC,CAAM,CAAC,CACtBF,CAAM,CAACC,CAAI,CAAEC,CAAM,CACzB,CAAC,CACH,CAAC,CAAC,CAEFN,CAAQ,CAACS,OAAO,CAAC,SAACI,CAAO,CAAK,CAE5B,GAAM,CAAAC,CAAQ,CACZD,CAAO,CAACE,UAAU,CAAChB,gBAAgB,CAAC,oBAAoB,CAAC,CAE3Dc,CAAO,CAACF,gBAAgB,CAAC,OAAO,CAAE,SAACK,CAAC,CAAK,CAGvC,GAAM,CAAAC,CAAM,CAAGD,CAAC,CAACE,MAAM,CAACC,SAAS,CAACC,QAAQ,CACxC,kCAAkC,CACnC,CAGDN,CAAQ,CAACL,OAAO,CAAC,SAACJ,CAAI,CAAK,CACzB,GAAM,CAAAC,CAAM,CAAGD,CAAI,CAACK,aAAa,CAACT,CAAU,CAAC,CAEzC,KAAAgB,CAAgB,CAClBT,CAAQ,CAACH,CAAI,CAAEC,CAAM,CAAC,CAEtBF,CAAM,CAACC,CAAI,CAAEC,CAAM,CAEvB,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,C","sources":["webpack://emulsify-drupal/./components/02-molecules/accordion/accordion.js"],"sourcesContent":["Drupal.behaviors.accordion = {\n  attach(context) {\n    // Selectors\n    const items = context.querySelectorAll('.js-accordion-item');\n    const controls = context.querySelectorAll('.js-accordion__controls');\n    // Classes\n    const itemToggle = '.js-accordion-item__toggle';\n    const itemState = 'data-accordion-expanded';\n    const buttonState = 'aria-expanded';\n\n    // Function to expand an accordion item.\n    const expand = (item, button) => {\n      item.setAttribute(itemState, 'true');\n      button.setAttribute(buttonState, 'true');\n    };\n\n    // Function to collapse an accordion item.\n    const collapse = (item, button) => {\n      item.setAttribute(itemState, 'false');\n      button.setAttribute(buttonState, 'false');\n    };\n\n    // Toggle accordion content when toggle is activated.\n    items.forEach((item) => {\n      const button = item.querySelector(itemToggle);\n\n      // Hide all accordion content sections if JavaScript is enabled.\n      collapse(item, button);\n\n      button.addEventListener('click', () => {\n        // Toggle the item's state.\n        return button.getAttribute(buttonState) === 'true'\n          ? collapse(item, button)\n          : expand(item, button);\n      });\n    });\n\n    controls.forEach((control) => {\n      // Get all items relevant to the control.\n      const allItems =\n        control.parentNode.querySelectorAll('.js-accordion-item');\n      // Add click listener on the parent <ul>\n      control.addEventListener('click', (e) => {\n        // Determine which control was activated. `action` will re turn a\n        // boolean. `true` if the expand control was clicked, otherwise false.\n        const action = e.target.classList.contains(\n          'js-accordion__toggle-all--expand',\n        );\n\n        // Iterate over\n        allItems.forEach((item) => {\n          const button = item.querySelector(itemToggle);\n\n          if (action === false) {\n            collapse(item, button);\n          } else {\n            expand(item, button);\n          }\n        });\n      });\n    });\n  },\n};\n"],"names":["Drupal","behaviors","accordion","attach","context","items","querySelectorAll","controls","itemToggle","itemState","buttonState","expand","item","button","setAttribute","collapse","forEach","querySelector","addEventListener","getAttribute","control","allItems","parentNode","e","action","target","classList","contains"],"sourceRoot":""}