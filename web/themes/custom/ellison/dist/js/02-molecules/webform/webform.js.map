{"version":3,"file":"js/02-molecules/webform/webform.js","mappings":"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","sources":["webpack://emulsify-drupal/./components/02-molecules/webform/webform.js"],"sourcesContent":["Drupal.behaviors.handleWebform = {\n  attach: function (context, settings) {\n    // Use context to filter the DOM to only the elements of interest,\n    // and use once() to guarantee that our callback function processes\n    // any given element one time at most, regardless of how many times\n    // the behaviour itself is called (it is not sufficient in general\n    // to assume an element will only ever appear in a single context).\n\n    once('handleNewsLetterForm', '#group__newsletter a.button-white', context).forEach(\n\n      // found webform component\n      function (element) {\n\n        function formWork(element) {\n\n          const buttonEl = element;\n\n          buttonEl.addEventListener('click', (e) => {\n            const newsletterToggleEl = document.querySelector('#group__newsletter .webform-submission-newsletter-form-form');\n            newsletterToggleEl.style.display = 'flex';\n            buttonEl.style.display = 'none';\n            e.preventDefault();\n          });\n\n        }\n\n        // check if webform is added by bigpipe\n        const checkReadyState = setInterval(() => {\n          if (document.readyState === \"complete\") {\n            clearInterval(checkReadyState);\n            formWork(element);\n          }\n        }, 100);\n\n      }\n\n    );\n\n\n    once('handleTaxCalculationForm', '#group__tax-calculator-section-179', context).forEach(\n\n      // found webform component\n      function (element) {\n\n        /*\n         * element often does not have the tax form so we need to wait for BigPipe to add it\n         * run when tax calculator form element is presetn\n        */\n\n        const observer = new MutationObserver((mutations, obs) => {\n          const taxForm = document.querySelector('.webform-submission-tax-calculator-form');\n          if (taxForm) {\n            formWork(taxForm);\n            obs.disconnect();\n            return;\n          }\n        });\n\n        observer.observe(document, {\n          childList: true,\n          subtree: true\n        });\n\n        // calculate deduction based on price\n        function calculateDeduction(price) {\n\n          if (price < 1160000) {\n            // less than 1,160,000 return price\n            return price;\n          } else if (price >= 1160000 && price < 2890000) {\n            // between 1,160,000 and 2,890,000 return 1,160,000\n            return 1160000;\n          } else if (price >= 2890000 && price < 4049999) {\n            // between 2,890,000 and 4,049,999 return delta\n            return 1160000 - (price - 2890000);\n          } else {\n            // greater than 4049999 return 0\n            return 0;\n          }\n\n        }\n\n        let USDollar = new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD',\n          minimumFractionDigits: 0,\n        });\n\n        function updateCalculations(webformElements) {\n\n          // get values from webform elements\n          let empInput = webformElements['edit-estimated-machine-price'];\n          let deductionInput = webformElements['edit-section-179-deduction'];\n          let balanceInput = webformElements['edit-balance-depreciate-over-seven-years'];\n          let bonusInput = webformElements['edit-80-bonus-depreciation'];\n          let standardInput = webformElements['edit-standard-depreciation'];\n          let firstInput = webformElements['edit-total-first-year-tax-deduction'];\n          let bracketInput = webformElements['edit-assumed-customer-tax-bracket'];\n          let savingsInput = webformElements['edit-tax-savings'];\n          let paymentsInput = webformElements['edit-approximate-number-of-payments'];\n          let empOutput = webformElements['edit-emp'];\n\n          // get estimated machine price (emp)\n          let emp = empInput.value;\n\n          // copy emp to output\n          empOutput.value = USDollar.format(emp);\n\n          // calculate deduction\n          let deduction = calculateDeduction(emp);\n          deductionInput.value = USDollar.format(deduction); // Math.round(deduction)\n\n          // calculate balance\n          let balance = emp - deduction;\n          balanceInput.value = USDollar.format(balance);\n\n          // calculate bonus depreciation\n          let bonusDepreciation = balance * 0.8;\n          bonusInput.value = USDollar.format(bonusDepreciation);\n\n          // calculate standard depreciation\n          let standardDepreciation = (balance - bonusDepreciation) * 0.1429;\n          standardInput.value = USDollar.format(standardDepreciation);\n\n          // calculate first year tax deduction\n          let first = Math.round(deduction + bonusDepreciation + standardDepreciation);\n          firstInput.value = USDollar.format(first);\n\n          // calculate tax savings based on assumed tax bracket\n          bracket = bracketInput.value/100;\n          let savings = first * bracket;\n          savingsInput.value = USDollar.format(savings);\n\n          // calculate payments\n          let payments = savings/(emp * 0.02);\n          paymentsInput.value = Math.round(payments);\n\n        }\n\n        // function to handle webforms\n        function formWork(formEl) {\n\n          // get webform element\n          let webform = formEl;\n          let webformClasses = webform.classList;\n          const formNames = [...webformClasses];\n\n          // if webform is tax calculator\n          if (formNames.includes('webform-submission-tax-calculator-form')) {\n\n            // get webform elements and values\n            let webformElements = webform.elements;\n            let empInput = webformElements['edit-estimated-machine-price'];\n            let bracketInput = webformElements['edit-assumed-customer-tax-bracket'];\n            let calculateButton = formEl.querySelector('.webform-button--submit');\n\n            // set default values\n            empInput.value = 1950000;\n            bracketInput.value = 32;\n\n            // initialize calculations\n            updateCalculations(webformElements);\n\n            calculateButton.addEventListener('click', (e) => {\n              updateCalculations(webformElements);\n              e.preventDefault();\n            });\n            \n          }\n\n        }\n\n      },\n\n    );\n\n  }\n};\n"],"names":["Drupal","behaviors","handleWebform","attach","context","once","forEach","element","formWork","buttonEl","addEventListener","e","newsletterToggleEl","document","querySelector","style","display","preventDefault","checkReadyState","setInterval","readyState","clearInterval","calculateDeduction","price","updateCalculations","webformElements","empInput","deductionInput","balanceInput","bonusInput","standardInput","firstInput","bracketInput","savingsInput","paymentsInput","empOutput","emp","value","USDollar","format","deduction","balance","bonusDepreciation","standardDepreciation","first","Math","round","bracket","savings","formEl","webform","webformClasses","classList","formNames","_toConsumableArray","includes","elements","calculateButton","observer","MutationObserver","mutations","obs","taxForm","disconnect","observe","childList","subtree","Intl","NumberFormat","currency","minimumFractionDigits"],"sourceRoot":""}