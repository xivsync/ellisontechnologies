{"version":3,"file":"js/02-molecules/webform/webform.js","mappings":";;;;;+9BAAAA,MAAM,CAACC,SAAS,CAACC,aAAa,CAAG,CAC/BC,MAAM,CAAE,SAAAA,OAAUC,CAAO,CAAY,CAOnCC,IAAI,CAAC,wBAAwB,CAAE,0BAA0B,CAAED,CAAO,CAAC,CAACE,OAAO,CACzE,SAAUC,CAAO,CAAE,CACjB,GAAM,CAAAC,CAAM,CAAGD,CAAO,CAACE,QAAQ,CAC/B,GAAIC,MAAM,CAACC,MAAM,CAACC,cAAc,CAAE,SAAS,CAAC,EAAIF,MAAM,CAACC,MAAM,CAACH,CAAM,CAAC,WAAW,CAAC,CAAG,IAC5E,CAAAK,CAAc,CAAGD,cAAc,CAACE,OAAO,CAACD,cAAc,CACtDE,CAAoB,CAAGH,cAAc,CAACE,OAAO,CAACC,oBAAoB,CACxEP,CAAM,CAAAQ,SAAa,CAACC,KAAK,CAAGF,CAAoB,CAChDG,OAAO,CAACC,GAAG,CAACN,CAAc,CAAG,iBAAiB,CAACE,CAAoB,CACrE,CACF,CAAC,CACF,CAEDV,IAAI,CAAC,sBAAsB,CAAE,mCAAmC,CAAED,CAAO,CAAC,CAACE,OAAO,CAGhF,SAAUC,CAAO,CAAE,CAEjB,QAAS,CAAAa,CAAQA,CAACb,CAAO,CAAE,CAEzB,GAAM,CAAAc,CAAQ,CAAGd,CAAO,CAExBc,CAAQ,CAACC,gBAAgB,CAAC,OAAO,CAAE,SAACC,CAAC,CAAK,CACxC,GAAM,CAAAC,CAAkB,CAAGC,QAAQ,CAACC,aAAa,CAAC,6DAA6D,CAAC,CAChHF,CAAkB,CAACG,KAAK,CAACC,WAAW,CAAC,SAAS,CAAE,MAAM,CAAE,WAAW,CAAC,CACpEP,CAAQ,CAACM,KAAK,CAACE,OAAO,CAAG,MAAM,CAC/BN,CAAC,CAACO,cAAc,EAClB,CAAC,CAEH,CAGA,GAAM,CAAAC,CAAe,CAAGC,WAAW,CAAC,UAAM,CACZ,UAAU,GAAlCP,QAAQ,CAACQ,UAAyB,GACpCC,aAAa,CAACH,CAAe,CAAC,CAC9BX,CAAQ,CAACb,CAAO,CAAC,CAErB,CAAC,CAAE,GAAG,CAER,CAAC,CAEF,CAGDF,IAAI,CAAC,0BAA0B,CAAE,oCAAoC,CAAED,CAAO,CAAC,CAACE,OAAO,CAGrF,UAAmB,CAsBjB,QAAS,CAAA6B,CAAkBA,CAACC,CAAK,CAAE,OAErB,QAAO,CAAfA,CAAe,CACV,CAAC,CACS,KAAO,CAAfA,CAAe,CACjB,KAAO,EAAIA,CAAK,CAAG,KAAO,CAAC,CACjB,KAAO,CAAfA,CAAe,CACjBA,CAAK,CAEL,KAGX,CAQA,QAAS,CAAAC,CAAkBA,CAACC,CAAe,CAAE,IAGvC,CAAAC,CAAQ,CAAGD,CAAe,CAAC,8BAA8B,CAAC,CAC1DE,CAAc,CAAGF,CAAe,CAAC,4BAA4B,CAAC,CAC9DG,CAAY,CAAGH,CAAe,CAAC,0CAA0C,CAAC,CAC1EI,CAAU,CAAGJ,CAAe,CAAC,4BAA4B,CAAC,CAC1DK,CAAa,CAAGL,CAAe,CAAC,4BAA4B,CAAC,CAC7DM,CAAU,CAAGN,CAAe,CAAC,qCAAqC,CAAC,CACnEO,CAAY,CAAGP,CAAe,CAAC,mCAAmC,CAAC,CACnEQ,CAAY,CAAGR,CAAe,CAAC,kBAAkB,CAAC,CAClDS,CAAa,CAAGT,CAAe,CAAC,qCAAqC,CAAC,CACtEU,CAAS,CAAGV,CAAe,CAAC,UAAU,CAAC,CAGvCW,CAAG,CAAGV,CAAQ,CAACtB,KAAK,CAGxB+B,CAAS,CAAC/B,KAAK,CAAGiC,CAAQ,CAACC,MAAM,CAACF,CAAG,CAAC,CAGtC,GAAI,CAAAG,CAAS,CAAGjB,CAAkB,CAACc,CAAG,CAAC,CACvCT,CAAc,CAACvB,KAAK,CAAGiC,CAAQ,CAACC,MAAM,CAACC,CAAS,CAAC,CAGjD,GAAI,CAAAC,CAAO,CAAGJ,CAAG,CAAGG,CAAS,CAC7BX,CAAY,CAACxB,KAAK,CAAGiC,CAAQ,CAACC,MAAM,CAACE,CAAO,CAAC,CAG7C,GAAI,CAAAC,CAAiB,CAAa,EAAG,CAAbD,CAAa,CACrCX,CAAU,CAACzB,KAAK,CAAGiC,CAAQ,CAACC,MAAM,CAACG,CAAiB,CAAC,CAGrD,GAAI,CAAAC,CAAoB,CAAmC,KAAM,EAArCF,CAAO,CAAGC,CAAiB,CAAU,CACjEX,CAAa,CAAC1B,KAAK,CAAGiC,CAAQ,CAACC,MAAM,CAACI,CAAoB,CAAC,CAG3D,GAAI,CAAAC,CAAK,CAAGC,IAAI,CAACC,KAAK,CAACN,CAAS,CAAGE,CAAiB,CAAGC,CAAoB,CAAC,CAC5EX,CAAU,CAAC3B,KAAK,CAAGiC,CAAQ,CAACC,MAAM,CAACK,CAAK,CAAC,CAGzCG,OAAO,CAAGd,CAAY,CAAC5B,KAAK,CAAC,GAAG,CAChC,GAAI,CAAA2C,CAAO,CAAGJ,CAAK,CAAGG,OAAO,CAC7Bb,CAAY,CAAC7B,KAAK,CAAGiC,CAAQ,CAACC,MAAM,CAACS,CAAO,CAAC,CAI7Cb,CAAa,CAAC9B,KAAK,CAAGwC,IAAI,CAACC,KAAK,CADjBE,CAAO,EAAQ,GAAI,CAAVX,CAAU,CAAC,CAGrC,CAGA,QAAS,CAAA7B,CAAQA,CAACyC,CAAM,CAAE,IAGpB,CAAAC,CAAO,CAAGD,CAAM,CAChBE,CAAc,CAAGD,CAAO,CAACE,SAAS,CAChCC,CAAS,CAAAC,kBAAA,CAAOH,CAAc,CAAC,CAGrC,GAAIE,CAAS,CAACE,QAAQ,CAAC,wCAAwC,CAAC,CAAE,IAG5D,CAAA7B,CAAe,CAAGwB,CAAO,CAACrD,QAAQ,CAClC8B,CAAQ,CAAGD,CAAe,CAAC,8BAA8B,CAAC,CAC1DO,CAAY,CAAGP,CAAe,CAAC,mCAAmC,CAAC,CACnE8B,CAAe,CAAGP,CAAM,CAACnC,aAAa,CAAC,yBAAyB,CAAC,CAGrEa,CAAQ,CAACtB,KAAK,CAAG,KAAO,CACxB4B,CAAY,CAAC5B,KAAK,CAAG,EAAE,CAGvBoB,CAAkB,CAACC,CAAe,CAAC,CAEnC8B,CAAe,CAAC9C,gBAAgB,CAAC,OAAO,CAAE,SAACC,CAAC,CAAK,CAC/Cc,CAAkB,CAACC,CAAe,CAAC,CACnCf,CAAC,CAACO,cAAc,EAClB,CAAC,CAEH,CAEF,CArHA,GAAM,CAAAuC,CAAQ,CAAG,GAAI,CAAAC,gBAAgB,CAAC,SAACC,CAAS,CAAEC,CAAG,CAAK,CACxD,GAAM,CAAAC,CAAO,CAAGhD,QAAQ,CAACC,aAAa,CAAC,yCAAyC,CAAC,CACjF,GAAI+C,CAAO,CAGT,MAFA,CAAArD,CAAQ,CAACqD,CAAO,CAAC,KACjB,CAAAD,CAAG,CAACE,UAAU,EAGlB,CAAC,CAAC,CAEFL,CAAQ,CAACM,OAAO,CAAClD,QAAQ,CAAE,CACzBmD,SAAS,GAAM,CACfC,OAAO,GACT,CAAC,CAAC,CAiBF,GAAI,CAAA3B,CAAQ,CAAG,GAAI,CAAA4B,IAAI,CAACC,YAAY,CAAC,OAAO,CAAE,CAC5CpD,KAAK,CAAE,UAAU,CACjBqD,QAAQ,CAAE,KAAK,CACfC,qBAAqB,CAAE,CACzB,CAAC,CAsFH,CAAC,CAIL,CACF,CAAC,C","sources":["webpack://emulsify-drupal/./components/02-molecules/webform/webform.js"],"sourcesContent":["Drupal.behaviors.handleWebform = {\n  attach: function (context, settings) {\n    // Use context to filter the DOM to only the elements of interest,\n    // and use once() to guarantee that our callback function processes\n    // any given element one time at most, regardless of how many times\n    // the behaviour itself is called (it is not sufficient in general\n    // to assume an element will only ever appear in a single context).\n\n    once('handleRegionFormInputs', '.webform-submission-form', context).forEach(\n      function (element) {\n        const inputs = element.elements;\n        if (Object.hasOwn(drupalSettings, \"ellison\") && Object.hasOwn(inputs,'region__c') ) {\n          const session_region = drupalSettings.ellison.session_region;\n          const session_sf_region_id = drupalSettings.ellison.session_sf_region_id;\n          inputs['region__c'].value = session_sf_region_id;\n          console.log(session_region + ' SF Region ID: ',session_sf_region_id);\n        }\n      }\n    );\n\n    once('handleNewsLetterForm', '#group__newsletter a.button-white', context).forEach(\n\n      // found webform component\n      function (element) {\n\n        function formWork(element) {\n\n          const buttonEl = element;\n\n          buttonEl.addEventListener('click', (e) => {\n            const newsletterToggleEl = document.querySelector('#group__newsletter .webform-submission-newsletter-form-form');\n            newsletterToggleEl.style.setProperty('display', 'grid', 'important');\n            buttonEl.style.display = 'none';\n            e.preventDefault();\n          });\n\n        }\n\n        // check if webform is added by bigpipe\n        const checkReadyState = setInterval(() => {\n          if (document.readyState === \"complete\") {\n            clearInterval(checkReadyState);\n            formWork(element);\n          }\n        }, 100);\n\n      }\n\n    );\n\n\n    once('handleTaxCalculationForm', '#group__tax-calculator-section-179', context).forEach(\n\n      // found webform component\n      function (element) {\n\n        /*\n         * element often does not have the tax form so we need to wait for BigPipe to add it\n         * run when tax calculator form element is presetn\n        */\n\n        const observer = new MutationObserver((mutations, obs) => {\n          const taxForm = document.querySelector('.webform-submission-tax-calculator-form');\n          if (taxForm) {\n            formWork(taxForm);\n            obs.disconnect();\n            return;\n          }\n        });\n\n        observer.observe(document, {\n          childList: true,\n          subtree: true\n        });\n\n        // calculate deduction based on price\n        function calculateDeduction(price) {\n\n          if (price > 4269999) {\n            return 0;\n          } else if (price > 3050000) {\n            return 1220000 - (price - 3050000);\n          } else if (price < 1220000) {\n            return price;\n          } else {\n            return 1220000; // Handle the case where G29 is exactly 1220000 (optional)\n          }\n\n        }\n\n        let USDollar = new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD',\n          minimumFractionDigits: 0,\n        });\n\n        function updateCalculations(webformElements) {\n\n          // get values from webform elements\n          let empInput = webformElements['edit-estimated-machine-price'];\n          let deductionInput = webformElements['edit-section-179-deduction'];\n          let balanceInput = webformElements['edit-balance-depreciate-over-seven-years'];\n          let bonusInput = webformElements['edit-80-bonus-depreciation'];\n          let standardInput = webformElements['edit-standard-depreciation'];\n          let firstInput = webformElements['edit-total-first-year-tax-deduction'];\n          let bracketInput = webformElements['edit-assumed-customer-tax-bracket'];\n          let savingsInput = webformElements['edit-tax-savings'];\n          let paymentsInput = webformElements['edit-approximate-number-of-payments'];\n          let empOutput = webformElements['edit-emp'];\n\n          // get estimated machine price (emp)\n          let emp = empInput.value;\n\n          // copy emp to output\n          empOutput.value = USDollar.format(emp);\n\n          // calculate deduction\n          let deduction = calculateDeduction(emp);\n          deductionInput.value = USDollar.format(deduction); // Math.round(deduction)\n\n          // calculate balance\n          let balance = emp - deduction;\n          balanceInput.value = USDollar.format(balance);\n\n          // calculate bonus depreciation\n          let bonusDepreciation = balance * 0.6;\n          bonusInput.value = USDollar.format(bonusDepreciation);\n\n          // calculate standard depreciation\n          let standardDepreciation = (balance - bonusDepreciation) * 0.1429;\n          standardInput.value = USDollar.format(standardDepreciation);\n\n          // calculate first year tax deduction\n          let first = Math.round(deduction + bonusDepreciation + standardDepreciation);\n          firstInput.value = USDollar.format(first);\n\n          // calculate tax savings based on assumed tax bracket\n          bracket = bracketInput.value/100;\n          let savings = first * bracket;\n          savingsInput.value = USDollar.format(savings);\n\n          // calculate payments\n          let payments = savings/(emp * 0.02);\n          paymentsInput.value = Math.round(payments);\n\n        }\n\n        // function to handle webforms\n        function formWork(formEl) {\n\n          // get webform element\n          let webform = formEl;\n          let webformClasses = webform.classList;\n          const formNames = [...webformClasses];\n\n          // if webform is tax calculator\n          if (formNames.includes('webform-submission-tax-calculator-form')) {\n\n            // get webform elements and values\n            let webformElements = webform.elements;\n            let empInput = webformElements['edit-estimated-machine-price'];\n            let bracketInput = webformElements['edit-assumed-customer-tax-bracket'];\n            let calculateButton = formEl.querySelector('.webform-button--submit');\n\n            // set default values\n            empInput.value = 1950000;\n            bracketInput.value = 32;\n\n            // initialize calculations\n            updateCalculations(webformElements);\n\n            calculateButton.addEventListener('click', (e) => {\n              updateCalculations(webformElements);\n              e.preventDefault();\n            });\n            \n          }\n\n        }\n\n      },\n\n    );\n\n  }\n};\n"],"names":["Drupal","behaviors","handleWebform","attach","context","once","forEach","element","inputs","elements","Object","hasOwn","drupalSettings","session_region","ellison","session_sf_region_id","region__c","value","console","log","formWork","buttonEl","addEventListener","e","newsletterToggleEl","document","querySelector","style","setProperty","display","preventDefault","checkReadyState","setInterval","readyState","clearInterval","calculateDeduction","price","updateCalculations","webformElements","empInput","deductionInput","balanceInput","bonusInput","standardInput","firstInput","bracketInput","savingsInput","paymentsInput","empOutput","emp","USDollar","format","deduction","balance","bonusDepreciation","standardDepreciation","first","Math","round","bracket","savings","formEl","webform","webformClasses","classList","formNames","_toConsumableArray","includes","calculateButton","observer","MutationObserver","mutations","obs","taxForm","disconnect","observe","childList","subtree","Intl","NumberFormat","currency","minimumFractionDigits"],"sourceRoot":""}