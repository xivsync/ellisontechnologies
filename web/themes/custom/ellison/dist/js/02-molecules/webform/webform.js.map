{"version":3,"file":"js/02-molecules/webform/webform.js","mappings":"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","sources":["webpack://emulsify-drupal/./components/02-molecules/webform/webform.js"],"sourcesContent":["Drupal.behaviors.handleWebform = {\n  attach: function (context, settings) {\n    // Use context to filter the DOM to only the elements of interest,\n    // and use once() to guarantee that our callback function processes\n    // any given element one time at most, regardless of how many times\n    // the behaviour itself is called (it is not sufficient in general\n    // to assume an element will only ever appear in a single context).\n    once('handleBigPipeForms', '.webform', context).forEach(\n\n\n      // found webform component\n      function (element) {\n\n        // calculate deduction based on price\n        function calculateDeduction(price) {\n\n          if (price < 1160000) {\n            // less than 1,160,000 return price\n            return price;\n          } else if (price >= 1160000 && price < 2890000) {\n            // between 1,160,000 and 2,890,000 return 1,160,000\n            return 1160000;\n          } else if (price >= 2890000 && price < 4049999) {\n            // between 2,890,000 and 4,049,999 return delta\n            return 1160000 - (price - 2890000);\n          } else {\n            // greater than 4049999 return 0\n            return 0;\n          }\n\n        }\n\n        function updateCalculations(webformElements) {\n\n          // get values from webform elements\n          let empInput = webformElements['edit-estimated-machine-price'];\n          let deductionInput = webformElements['edit-section-179-deduction'];\n          let balanceInput = webformElements['edit-balance-depreciate-over-seven-years'];\n          let bonusInput = webformElements['edit-80-bonus-depreciation'];\n          let standardInput = webformElements['edit-standard-depreciation'];\n          let firstInput = webformElements['edit-total-first-year-tax-deduction'];\n          let bracketInput = webformElements['edit-assumed-customer-tax-bracket'];\n          let savingsInput = webformElements['edit-tax-savings'];\n          let paymentsInput = webformElements['edit-approximate-number-of-payments'];\n\n          // get estimated machine price (emp)\n          let emp = empInput.value;\n\n          // calculate deduction\n          let deduction = calculateDeduction(emp);\n          deductionInput.value = Math.round(deduction);\n\n          // calculate balance\n          let balance = emp - deduction;\n          balanceInput.value = Math.round(balance);\n\n          // calculate bonus depreciation\n          let bonusDepreciation = balance * 0.8;\n          bonusInput.value = Math.round(bonusDepreciation);\n\n          // calculate standard depreciation\n          let standardDepreciation = (balance - bonusDepreciation) * 0.1429;\n          standardInput.value = Math.round(standardDepreciation);\n\n          // calculate first year tax deduction\n          let first = Math.round(deduction + bonusDepreciation + standardDepreciation);\n          firstInput.value = first;\n\n          // calculate tax savings based on assumed tax bracket\n          bracket = bracketInput.value/100;\n          let savings = first * bracket;\n          savingsInput.value = Math.round(savings);\n\n          // calculate payments\n          let payments = savings/(emp * 0.02);\n          paymentsInput.value = Math.round(payments);\n\n        }\n\n        // function to handle webforms\n        function formWork(element) {\n\n          // get webform element\n          let webform = element.querySelector(\".webform-submission-form\");\n          let webformClasses = webform.classList;\n          const formNames = [...webformClasses];\n\n          // if webform is tax calculator\n          if (formNames.includes('webform-submission-tax-calculator-form')) {\n\n            // get webform elements and values\n            let webformElements = webform.elements;\n            let empInput = webformElements['edit-estimated-machine-price'];\n            let bracketInput = webformElements['edit-assumed-customer-tax-bracket'];\n\n            // set default values\n            empInput.value = 1950000;\n            bracketInput.value = 32;\n\n            // initialize calculations\n            updateCalculations(webformElements);\n\n            // update calculations on change of price (emp)\n            empInput.addEventListener('change', (e) => {\n              updateCalculations(webformElements);\n            });\n\n            // update calculations on change of tax bracket\n            bracketInput.addEventListener('change', (e) => {\n              updateCalculations(webformElements);\n            });\n            \n          }\n\n        }\n\n        // check if webform is added by bigpipe\n        const checkReadyState = setInterval(() => {\n          if (document.readyState === \"complete\") {\n            clearInterval(checkReadyState);\n            formWork(element);\n          }\n        }, 100);\n\n      },\n\n    );\n\n  }\n};\n"],"names":["Drupal","behaviors","handleWebform","attach","context","once","forEach","element","calculateDeduction","price","updateCalculations","webformElements","empInput","deductionInput","balanceInput","bonusInput","standardInput","firstInput","bracketInput","savingsInput","paymentsInput","emp","value","deduction","Math","round","balance","bonusDepreciation","standardDepreciation","first","bracket","savings","formWork","webform","querySelector","webformClasses","classList","formNames","_toConsumableArray","includes","elements","addEventListener","checkReadyState","setInterval","document","readyState","clearInterval"],"sourceRoot":""}