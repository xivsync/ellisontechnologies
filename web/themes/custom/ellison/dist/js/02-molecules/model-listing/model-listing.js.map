{"version":3,"file":"js/02-molecules/model-listing/model-listing.js","mappings":";;;;;gqDAAAA,MAAM,CAACC,SAAS,CAACC,YAAY,CAAG,CAC9BC,MAAM,CAAE,SAAAA,OAAUC,CAAO,CAAY,CAMnCC,IAAI,CAAC,gBAAgB,CAAE,gBAAgB,CAAED,CAAO,CAAC,CAACE,OAAO,CAGvD,SAAUC,CAAO,CAAE,KAAAC,CAAA,CAMXC,CAAc,CAAGF,CAAO,CAACG,sBAAsB,CAAC,aAAa,CAAC,CAChEC,CAAc,CAAG,EAAE,CAAAC,CAAA,CAAAC,0BAAA,CACDJ,CAAc,MAApC,IAAAG,CAAA,CAAAE,CAAA,KAAAN,CAAA,CAAAI,CAAA,CAAAG,CAAA,IAAAC,IAAA,EAAsC,CAAjCC,aAAa,CAAAT,CAAA,CAAAU,KAAA,IAGV,CAAAC,CAAS,CAAGF,aAAa,CAACP,sBAAsB,CAAC,QAAQ,CAAC,CAG5DU,CAAY,CAAGD,CAAS,CAAC,CAAC,CAAC,CAACE,OAAO,CAACC,OAAO,CAC/CL,aAAa,CAACI,OAAO,CAACD,YAAY,CAAGA,CAAY,CAAGA,CAAY,CAAG,MAAM,CACzEH,aAAa,CAACM,SAAS,CAACC,GAAG,CAACJ,CAAY,CAAG,eAAe,CAAG,kBAAkB,CAAC,CAGhF,GAAI,CAAAK,CAAgB,CAAGL,CAAY,CAACM,KAAK,CAAC,GAAG,CAAC,CAC9Cf,CAAc,CAAGA,CAAc,CAACgB,MAAM,CAACF,CAAgB,CAAC,CAGxD,GAAI,CAAAG,CAAkB,CAAAC,kBAAA,CAAO,GAAI,CAAAC,GAAG,CAACL,CAAgB,CAAC,CAAC,CACvDG,CAAkB,CAACtB,OAAO,CAAC,SAAUyB,CAAI,CAAE,CAEzCd,aAAa,CAACM,SAAS,CAACC,GAAG,CACzB,SAAS,CAAGO,CAAI,CAACC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAACA,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAACC,WAAW,EAAE,CAEpE,CAAC,CAEH,CAAC,OAAAC,CAAA,EAAAtB,CAAA,CAAAA,CAAA,CAAAsB,CAAA,UAAAtB,CAAA,CAAAuB,CAAA,MAGG,CAAAC,CAAiB,CAAAP,kBAAA,CAAO,GAAI,CAAAC,GAAG,CAACnB,CAAc,CAAC,CAUrD,CAAC,CAIL,CACF,CAAC,C","sources":["webpack://emulsify-drupal/./components/02-molecules/model-listing/model-listing.js"],"sourcesContent":["Drupal.behaviors.modelListing = {\n  attach: function (context, settings) {\n    // Use context to filter the DOM to only the elements of interest,\n    // and use once() to guarantee that our callback function processes\n    // any given element one time at most, regardless of how many times\n    // the behaviour itself is called (it is not sufficient in general\n    // to assume an element will only ever appear in a single context).\n    once('filterByRegion', '.model-listing', context).forEach(\n      \n      // found a model listing component\n      function (element) {\n\n        // get user region from cookie\n        const userRegion = 'Wisconsin';\n\n        // get collections group 1 by brand\n        const collectionsEls = element.getElementsByClassName(\"collections\");\n        let allRegionsList = [];\n        for (collectionsEl of collectionsEls) {\n\n          // get regions for this collection\n          const regionEls = collectionsEl.getElementsByClassName(\"region\");\n          \n          // add comma delimited list of regions for brand to collection\n          let brandRegions = regionEls[0].dataset.regions;\n          collectionsEl.dataset.brandRegions = brandRegions ? brandRegions : 'none';\n          collectionsEl.classList.add(brandRegions ? 'check-regions' : 'check-no-regions');\n\n          // split comma delimited list of regions into array\n          let brandRegionsList = brandRegions.split(',');\n          allRegionsList = allRegionsList.concat(brandRegionsList);\n\n          // set classlist for collection\n          let uniqueBrandRegions = [...new Set(brandRegionsList)];\n          uniqueBrandRegions.forEach(function (name) {\n            \n            collectionsEl.classList.add(\n              'region-' + name.replace(' - ','').replace(' ','').toLowerCase()\n            );\n          });\n\n        }\n\n        // create an array of unique regions\n        let uniqueRegionsList = [...new Set(allRegionsList)];\n\n        // add unique regions to drupalSettings\n        let ellisonUser = {\n          brand_regions: uniqueRegionsList,\n          user_region: userRegion,\n        }\n\n        //drupalSettings.ellisonUser = ellisonUser;\n        \n      }\n      \n    );\n\n  }\n};\n"],"names":["Drupal","behaviors","modelListing","attach","context","once","forEach","element","b","collectionsEls","getElementsByClassName","allRegionsList","e","_createForOfIteratorHelper","s","n","done","collectionsEl","value","regionEls","brandRegions","dataset","regions","classList","add","brandRegionsList","split","concat","uniqueBrandRegions","_toConsumableArray","Set","name","replace","toLowerCase","a","f","uniqueRegionsList"],"sourceRoot":""}