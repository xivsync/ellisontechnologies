<?php

use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
Use \Drupal\Core\Routing;

/**
 * @file
 * Functions to support theming.
 */

/**
 * Implements hook_preprocess_HOOK().
 */

function ellison_preprocess_html(&$variables) {
  $routeMatch = \Drupal::routeMatch();
  $node = $routeMatch->getParameter('node');
  if (isset($node) && $routeMatch->getRouteName() == 'entity.node.canonical') {
    if ($node->isPublished()) {
      $variables['attributes']['class'][] = 'published';
    }
    else {
      $variables['attributes']['class'][] = 'unpublished';
    } 
  }
}

function ellison_preprocess_page_title(&$variables)
{
  
  $show_title = 'yes';
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node instanceof \Drupal\node\NodeInterface) {

    $jumbo_mid = '';
    if ($node->hasField('field_jumbo_image')) {
      $jumbo_mid = $node->field_jumbo_image->target_id;
    }

    // if jumbo image exists, do not show title
    $variables['show_title'] =  $jumbo_mid != '' ? 'no' : 'yes';

  }

}

function ellison_preprocess_region(&$variables)
{

  $session = \Drupal::request()->getSession(); 
  
  if ($variables['region'] === 'header') {
    
    // debugging parameter values 
    $session_gclid = $session->get('gclid') ? $session->get('gclid') : null;
    if ($session_gclid !== null) {
      $variables['#attached']['drupalSettings']['ellison']['session_gclid'] = $session_gclid;
    }
    // debugging session values
    $parameter_gclid = \Drupal::request()->query->get('gclid') ? \Drupal::request()->query->get('gclid') : null;
    if ($parameter_gclid !== null){
      $variables['#attached']['drupalSettings']['ellison']['parameter_gclid'] = $parameter_gclid;
    }
    // handle setting gclid drupalSetting value
    if ($session_gclid !== null) {
      $session->set('gclid', $session_gclid);
      $variables['#attached']['drupalSettings']['ellison']['gclid'] = $session_gclid;
    }

    if ($parameter_gclid !== null) {
      $session->set('gclid', $parameter_gclid);
      $variables['#attached']['drupalSettings']['ellison']['gclid'] = $parameter_gclid;
    }

    // Get the node object.
    $node = \Drupal::routeMatch()->getParameter('node');

    if ($node instanceof \Drupal\node\NodeInterface) {

      // Add jumbo image path and attributes
      if ($node->hasField('field_jumbo_image')) {

        $wide = null;
        $alt = null;
        $width = null;
        $height = null;

        // Get media id 
        $jumbo_mid = $node->field_jumbo_image->target_id;
        if ($jumbo_mid) {
          
          // Get image path
          $media_entity = Media::load($jumbo_mid);
          $file_id = $media_entity->getSource()->getSourceFieldValue($media_entity);
          $file = File::load($file_id);

          // Get responsive image paths
          $wide = ImageStyle::load('wide_2600x2600')->buildUrl($file->getFileUri());

          // Get media image properties
          $mediaImage = $media_entity->get('field_media_image');
          $alt = $mediaImage->alt;
          $width = $mediaImage->width;
          $height = $mediaImage->height;
          $title = $mediaImage->title;

        }

        $variables['jumbo_image_path'] = $wide ? $wide : null;
        $variables['jumbo_image_alt'] = $alt ? $alt : null;
        $variables['jumbo_image_width'] = $width ? $width : null;
        $variables['jumbo_image_height'] = $height ? $height : null;
        $variables['jumbo_image_title'] = $node->getTitle();

      }

      $variables['enable_slide'] = $node->id()==='3' ? true : false;

    }

  }

}

function ellison_preprocess_views_view_unformatted(&$variables)
{

  $view = $variables['view'];
  $view_id = $view->id();
  $view_display = $view->current_display;

  /* handles is-active for series dropdown menu */
  if ($view_id == 'series' && $view->current_display == 'block_1') {

    $rows = $variables['rows'];
    foreach($view->result as $id => $row){

      $nid = $row->_entity->id();
      $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/'.$nid);

      $current_path = \Drupal::service('path.current')->getPath();
      $current_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
      
      if ($alias == $current_alias ) {
        $variables['rows'][$id]['attributes']->addClass('is-active');
      }

    }

  }

  if ($view_id == 'list_cards_of_models_for_a_series' && $view->current_display == 'block_1') {

    $sentance = ['Explore','the'];
    $rows = $variables['rows'];
    foreach($view->result as $id => $row){

      $nid = $row->_entity->id();
      $node = Node::load($nid);
      $term = Term::load($node->get('field_series')->target_id);
      $term_name = $term->getName();
      if (!in_array($term_name, $sentance)) {
        array_push($sentance, $term_name);
      }

    }

    array_push($sentance,'Lineup');

    $variables['series_name'] = implode(" ", $sentance);

  }

  // Add Node Title aka Model Name to dropdown
  if ($view_id == 'series' && $view->current_display == 'block_1') {
    // Node title a.k.a. model name used in dropdown
      $node = \Drupal::routeMatch()->getParameter('node');
      if(!empty($node) && in_array($node->bundle(), ['model'])) {
        $variables['node_title']  = $node->label();
      }
      else {
        $variables['node_title']  = 'Select a model from series';
      }
  }

  $handle_region_restrictions = false;

  /* handles removing rows when blocked */
  /* @todo: find another way to restrict models by content */
  if ($view_id == 'models' && $view->current_display == 'block_1' && $handle_region_restrictions) {

    $session = \Drupal::request()->getSession(); 
    $user_region_tid = $session->get('region_id');

    $rows = $variables['rows'];
    foreach($view->result as $id => $row){

      $nid = $row->_entity->id();
      $brand_tid =  $row->_entity->get('field_brand')->target_id;
      $brand_regions = \Drupal\taxonomy\Entity\Term::load($brand_tid)->get('field_region')->getString();
      $brand_region_tids = explode(', ',$brand_regions);

      if (!in_array($user_region_tid, $brand_region_tids, true)) {
        // user region tid does not match one of this model's brand regions
        unset($variables['rows'][$id]);
      }
    }

    // do not cache this
    $variables['#cache']['max-age'] = 0;

  }
}

/**
 * Implements hook_preprocess_HOOK() for paragraph templates.
 */
function ellison_preprocess_paragraph__cta_button(&$variables) {
  // Get the current URL.
  $current_url = \Drupal::request()->getUri();

  // URL encode the value.
  $encoded_url = rawurlencode($current_url);

  // Add the encoded URL to the variables array.
  $variables['encoded_url'] = $encoded_url;
}

function ellison_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view__' . $variables['view']->id();
}

function ellison_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view_unformatted__' . $variables['view']->id();
}
/**
 * Implements hook_preprocess_HOOK().
 */
function ellison_preprocess_node(&$variables) {
  if (isset($variables['node'])) {
    $node = $variables['node'];
    if ($node->bundle() == 'page') {
      $variables['#attached']['library'][] = 'ellison/webform';
    }
  }
}
