{#
/**
 * Group Component
 *
 * Available variables:
 *
  background_class: content.field_background_color | render | striptags | trim,
  align_class: content.field_align_text | render | striptags | trim,
  body: content.field_content,
 *
 */
#}


{% set attributes = create_attribute() %}

{%
  set classes = [
    'text',
    'prose',
    'max-w-none',
    background_class,
    background_class | render | striptags | trim ? 'has-bg-color' : 'no-bg-color',
    align_class,
    animate_class, 
    animate_activation_class,
  ]
%}

<div{{ attributes.addClass(classes) }}>
  {{ title_suffix }}
  <div class="text_inner">
    <div class="text__body">
      {{ body }}
    </div>
  </div>
<script>
document.addEventListener("DOMContentLoaded", function() {
    const elements = document.querySelectorAll('.animate__active');

    const observerOptions = {
        root: null, 
        rootMargin: '0px',
        threshold: 0.1 
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting && entry.target.classList.contains('slideinright')) {
                entry.target.classList.add('animate__animated', 'animate__slideInLeft', 'in-viewport');
            }  else if (entry.isIntersecting && entry.target.classList.contains('bounceinleft')) {
                entry.target.classList.add('animate__animated', 'animate__bounceInLeft', 'in-viewport');
            } else if (entry.isIntersecting && entry.target.classList.contains('slideinup')) {
                entry.target.classList.add('animate__animated', 'animate__slideInUp', 'in-viewport');
            } else if (entry.isIntersecting && entry.target.classList.contains('pulse')) {
                entry.target.classList.add('animate__animated', 'animate__pulse', 'in-viewport');
            } 
        });
    }, observerOptions);

    elements.forEach(element => {
        observer.observe(element);
    });
});
</script>
</div>